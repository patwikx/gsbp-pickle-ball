generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Booking {
  id             String   @id @default(cuid())
  courtId        Int
  userId         String
  date           String
  time           String
  user           User     @relation("UserBookings", fields: [userId], references: [id])
  invitedPlayers User[]   @relation("InvitedPlayers")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([courtId, date, time])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String                  @id @default(cuid())
  name          String?
  email         String?                 @unique
  password      String
  emailVerified Boolean?
  contactNo     String?
  address       String?
  image         String?
  roles         String?
  qrCode        String?                 @unique
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]               @relation("UserBookings")
  invitedTo     Booking[]               @relation("InvitedPlayers")
  twoFactor     TwoFactorConfirmation[]
  ownedGroups   Group[]                 @relation("GroupOwner")
  proofPayment  String?
  memberships   GroupMembership[]
  qrScans       QRScan[] // Relation to QR scans
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  renewalDate   DateTime?
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId   String
  tenantId String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model GroupMembership {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  role      String   @default("MEMBER")
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, groupId])
}

model GroupInvitation {
  id        String   @id @default(cuid())
  email     String
  groupId   String
  group     Group    @relation("GroupInvitations", fields: [groupId], references: [id])
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@unique([email, groupId])
}

model Group {
  id          String            @id @default(cuid())
  name        String
  description String?
  ownerId     String
  owner       User              @relation("GroupOwner", fields: [ownerId], references: [id])
  members     GroupMembership[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  invitations GroupInvitation[] @relation("GroupInvitations")
}

model QRScan {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  scannedAt DateTime @default(now())
  location  String? // Optional: track where the scan happened
  device    String? // Optional: track which device scanned the QR
}
